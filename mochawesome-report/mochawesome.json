{
  "stats": {
    "suites": 1,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-21T00:22:27.934Z",
    "end": "2025-07-21T00:22:31.129Z",
    "duration": 3195,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1dc10fe6-30dc-4457-920d-4e3f88a07fca",
      "title": "",
      "fullFile": "C:\\Users\\Dave\\Desktop\\Dave\\DESARROLLO\\prueba\\test\\api.spec.js",
      "file": "\\test\\api.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "187c925d-e673-461e-8fec-d416926c95dd",
          "title": "API FakeStore Automation – Suite Completa sin Fallos",
          "fullFile": "C:\\Users\\Dave\\Desktop\\Dave\\DESARROLLO\\prueba\\test\\api.spec.js",
          "file": "\\test\\api.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET  /products → debe devolver array de productos",
              "fullTitle": "API FakeStore Automation – Suite Completa sin Fallos GET  /products → debe devolver array de productos",
              "timedOut": false,
              "duration": 833,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { status, data } = await api.fetchAll();\nexpect(status).to.equal(200);\nexpect(data).to.be.an('array').and.not.empty;",
              "err": {},
              "uuid": "e78b6c4a-b6be-4ec3-bfab-4d2ce840e746",
              "parentUUID": "187c925d-e673-461e-8fec-d416926c95dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET  /products/1 → debe devolver producto con id 1",
              "fullTitle": "API FakeStore Automation – Suite Completa sin Fallos GET  /products/1 → debe devolver producto con id 1",
              "timedOut": false,
              "duration": 203,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { status, data } = await api.fetchOne(1);\nexpect(status).to.equal(200);\nexpect(data).to.be.an('object').and.have.property('id', 1);",
              "err": {},
              "uuid": "4fa05a76-d055-49ae-a7f4-311708919a05",
              "parentUUID": "187c925d-e673-461e-8fec-d416926c95dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET  /products/999999 → manejar id inexistente (status 200)",
              "fullTitle": "API FakeStore Automation – Suite Completa sin Fallos GET  /products/999999 → manejar id inexistente (status 200)",
              "timedOut": false,
              "duration": 197,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { status } = await api.fetchOne(999999);\nexpect(status).to.equal(200);",
              "err": {},
              "uuid": "5e31d742-c48e-45de-98b3-eafbc9ec3915",
              "parentUUID": "187c925d-e673-461e-8fec-d416926c95dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /products → crear producto válido",
              "fullTitle": "API FakeStore Automation – Suite Completa sin Fallos POST /products → crear producto válido",
              "timedOut": false,
              "duration": 213,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { status, data } = await api.create();\nexpect(status).to.equal(200);\nexpect(data).to.be.an('object').and.have.property('id');\ncreatedId = data.id;",
              "err": {},
              "uuid": "4b51512e-d38f-4895-8d3c-d6d1a8ccf957",
              "parentUUID": "187c925d-e673-461e-8fec-d416926c95dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT  /products/1 → actualizar producto existente",
              "fullTitle": "API FakeStore Automation – Suite Completa sin Fallos PUT  /products/1 → actualizar producto existente",
              "timedOut": false,
              "duration": 218,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { status, data } = await api.update(1);\nexpect(status).to.equal(200);\nexpect(data).to.be.an('object').and.have.property('id', 1);",
              "err": {},
              "uuid": "7a2acca9-cbf6-47b3-8b4d-aa8625eb63ee",
              "parentUUID": "187c925d-e673-461e-8fec-d416926c95dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT  /products/999999 → manejar actualización de id inexistente (status 200)",
              "fullTitle": "API FakeStore Automation – Suite Completa sin Fallos PUT  /products/999999 → manejar actualización de id inexistente (status 200)",
              "timedOut": false,
              "duration": 203,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { status } = await api.update(999999);\nexpect(status).to.equal(200);",
              "err": {},
              "uuid": "3ac973ec-db99-4915-8620-8511d282633f",
              "parentUUID": "187c925d-e673-461e-8fec-d416926c95dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE /products/1 → eliminar recurso existente",
              "fullTitle": "API FakeStore Automation – Suite Completa sin Fallos DELETE /products/1 → eliminar recurso existente",
              "timedOut": false,
              "duration": 304,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { status, data } = await api.remove(1);\nexpect(status).to.equal(200);\nexpect(data).to.be.an('object').and.have.property('id');",
              "err": {},
              "uuid": "00b8b7eb-8325-4e5f-917d-1680ec66748a",
              "parentUUID": "187c925d-e673-461e-8fec-d416926c95dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE /products/999999 → manejar delete de id inexistente (status 200)",
              "fullTitle": "API FakeStore Automation – Suite Completa sin Fallos DELETE /products/999999 → manejar delete de id inexistente (status 200)",
              "timedOut": false,
              "duration": 304,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { status } = await api.remove(999999);\nexpect(status).to.equal(200);",
              "err": {},
              "uuid": "ecaf7804-08e7-4669-92fa-291571c5f17c",
              "parentUUID": "187c925d-e673-461e-8fec-d416926c95dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Peticiones paralelas → debe devolver tres respuestas con status 200",
              "fullTitle": "API FakeStore Automation – Suite Completa sin Fallos Peticiones paralelas → debe devolver tres respuestas con status 200",
              "timedOut": false,
              "duration": 711,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const results = await api.parallelRequests();\nexpect(results).to.be.an('array').with.length(3);\nresults.forEach(r => expect(r).to.have.property('status', 200));",
              "err": {},
              "uuid": "c9b17a1e-2641-4f31-81c1-f3dabffcbd4e",
              "parentUUID": "187c925d-e673-461e-8fec-d416926c95dd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e78b6c4a-b6be-4ec3-bfab-4d2ce840e746",
            "4fa05a76-d055-49ae-a7f4-311708919a05",
            "5e31d742-c48e-45de-98b3-eafbc9ec3915",
            "4b51512e-d38f-4895-8d3c-d6d1a8ccf957",
            "7a2acca9-cbf6-47b3-8b4d-aa8625eb63ee",
            "3ac973ec-db99-4915-8620-8511d282633f",
            "00b8b7eb-8325-4e5f-917d-1680ec66748a",
            "ecaf7804-08e7-4669-92fa-291571c5f17c",
            "c9b17a1e-2641-4f31-81c1-f3dabffcbd4e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3186,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}